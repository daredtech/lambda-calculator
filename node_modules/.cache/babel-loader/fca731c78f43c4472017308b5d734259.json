{"ast":null,"code":"var _jsxFileName = \"/Users/red/Desktop/lambda/projects/lambda-calculator/src/App.js\";\nimport React from \"react\";\nimport Numbers from \"./components/ButtonComponents/NumberButtons/Numbers\";\nimport Specials from \"./components/ButtonComponents/SpecialButtons/Specials\";\nimport Operators from \"./components/ButtonComponents/OperatorButtons/Operators\";\nimport Logo from \"./components/DisplayComponents/Logo\";\nimport Display from \"./components/DisplayComponents/Display\";\nimport \"./App.css\"; // STEP 4 - import the button and display components\n// Don't forget to import any extra css/scss files you build into the correct component\n\nfunction App() {\n  // STEP 5 - After you get the components displaying using the provided data file, write your state hooks here.\n  // Once the state hooks are in place write some functions to hold data in state and update that data depending on what it needs to be doing\n  // Your functions should accept a parameter of the the item data being displayed to the DOM (ie - should recieve 5 if the user clicks on\n  // the \"5\" button, or the operator if they click one of those buttons) and then call your setter function to update state.\n  // Don't forget to pass the functions (and any additional data needed) to the components as props\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Logo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Display, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(Numbers, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(Specials, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(Operators, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/red/Desktop/lambda/projects/lambda-calculator/src/App.js"],"names":["React","Numbers","Specials","Operators","Logo","Display","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qDAApB;AACA,OAAOC,QAAP,MAAqB,uDAArB;AACA,OAAOC,SAAP,MAAsB,yDAAtB;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AAEA,OAAO,WAAP,C,CACA;AACA;;AAGA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA;AACA;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAHF,CADF;AAaD;;AAED,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport Numbers from \"./components/ButtonComponents/NumberButtons/Numbers\";\nimport Specials from \"./components/ButtonComponents/SpecialButtons/Specials\";\nimport Operators from \"./components/ButtonComponents/OperatorButtons/Operators\";\nimport Logo from \"./components/DisplayComponents/Logo\";\nimport Display from \"./components/DisplayComponents/Display\";\n\nimport \"./App.css\";\n// STEP 4 - import the button and display components\n// Don't forget to import any extra css/scss files you build into the correct component\n\n\nfunction App() {\n  // STEP 5 - After you get the components displaying using the provided data file, write your state hooks here.\n  // Once the state hooks are in place write some functions to hold data in state and update that data depending on what it needs to be doing\n  // Your functions should accept a parameter of the the item data being displayed to the DOM (ie - should recieve 5 if the user clicks on\n  // the \"5\" button, or the operator if they click one of those buttons) and then call your setter function to update state.\n  // Don't forget to pass the functions (and any additional data needed) to the components as props\n\n  return (\n    <div className=\"container\">\n      \n      <Logo />\n      <div className=\"App\">\n        {/* STEP 4 - Render your components here and be sure to properly import/export all files */}\n        <Display />\n        <Numbers />\n        <Specials />\n        <Operators />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}